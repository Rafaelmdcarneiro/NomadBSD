# amd64, i386, or mac
ARCH=amd64
# UFS, or ZFS
FILESYSTEM=UFS
RELEASE=14.0-RELEASE
BASEURL="http://download.freebsd.org/ftp"
WORKDIR="${PWD}/work"
# Where the FreeBSD installation resides.
SYSDIR="${WORKDIR}/sys"

EFI_LOADER="${SYSDIR}/boot/loader.efi"

# Size in MiB of the amd64 EFI partition.
AMD64_EFI_SIZE=40
# Size in MiB of the Mac EFI partition.
MAC_EFI_SIZE=200
# Fragment size for UFS
FRAGSIZE=4096

# Minimum required free disk space in MiB on /
ROOTFS_MINFREE_MIB=50
# Min. free storage space in % for base system
UFS_MINFREE=8
# Extra space in MB for base system.
BASEFS_EXTRA=100
# Size in MiB required for the base system without uzip, EFI partition, and
# BASEFS_EXTRA. Adjust as needed.
BASESIZE=1910

# ZFS pool name
ZFS_POOL=nomadbsd_zroot

# Default boot environment
ZFS_BE=default

# Sector size exponent for defining the sector size
ASHIFT=12

# glabels for partitions
ROOTLABEL=nomadroot
DATALABEL=nomaddata

# Cluster size for uzip conpression. Should be a multiple of 512 bytes.
UZIP_CLUSTERSZ=19456

PKGLIST=pkg.list

# Define postion for the boot menu
MENU_POSITION_X=5
MENU_POSITION_Y=12

# Define # of parallel jobs for compressing the uzip image
MKUZIP_JOBS=$(sysctl -n hw.ncpu)

# Extra loader settings for NomadBSD running on UFS
UFS_LOADER_SETTINGS() {
cat << UFS_LOADER_SETTINGS_END
UFS_LOADER_SETTINGS_END
}

# Extra loader settings for NomadBSD running on ZFS
ZFS_LOADER_SETTINGS() {
cat << ZFS_LOADER_SETTINGS_END
zfs_load="YES"
ZFS_LOADER_SETTINGS_END
}

# Extra sysctl settings for NomadBSD running on UFS
UFS_SYSCTL_SETTINGS() {
cat << UFS_SYSCTL_SETTINGS_END
vfs.vmiodirenable=0
vfs.read_max=16
vfs.write_behind=0

# Improve write speed a little bit
vfs.lorunningspace=1048576
vfs.hirunningspace=5242880
UFS_SYSCTL_SETTINGS_END
}

# Extra sysctl settings for NomadBSD running on ZFS
ZFS_SYSCTL_SETTINGS() {
cat << ZFS_SYSCTL_SETTINGS_END
ZFS_SYSCTL_SETTINGS_END
}

# Whether to build a custom kernel
BUILD_KERNEL="YES"

# Don't build the following kernel modules
WITHOUT_KMODS="drm drm2 i915kms mach64 mga r128 radeonkms savage sis tdfx via"

# Options passed to "make"
BUILDKERNEL_OPTS="-j$(sysctl -n hw.ncpu)"

KERNELOPTS() {
  COMMON_KERNELOPTS
  [ "${ARCH}" = "i386" ] && I386_KERNELOPTS
}

# Lines added to the kernel config file.
COMMON_KERNELOPTS() {
cat << COMMON_KERNELOPTS_END
ident       NOMADBSD
options     TERMINAL_NORM_ATTR=(FG_LIGHTBLUE|BG_BLACK)
options     TERMINAL_KERN_ATTR=(FG_LIGHTCYAN|BG_BLACK)
options     BWN_GPL_PHY
nooptions   COMPAT_FREEBSD4
nooptions   COMPAT_FREEBSD5
nooptions   COMPAT_FREEBSD6
nooptions   COMPAT_FREEBSD7
nooptions   COMPAT_FREEBSD9
nooptions   INVARIANTS
nooptions   INVARIANT_SUPPORT
nooptions   WITNESS
nooptions   WITNESS_SKIPSPIN
nooptions   BUF_TRACKING
nooptions   DEADLKRES
nooptions   FULL_BUF_TRACKING
nooptions   COVERAGE
nooptions   KCOV
nooptions   KDB
nooptions   KDB_TRACE
nooptions   GDB
nooptions   DDB_CTF
nooptions   DDB
COMMON_KERNELOPTS_END
}

I386_KERNELOPTS() {
cat << I386_KERNELOPTS_END
I386_KERNELOPTS_END
}


# Because of special options, some packages must be installed using the
# ports tree. Add each port as category/portname to PORTSLIST. The port's
# options can be defined by setting portname_OPTS. Dashes (``-´´)
# in port names must be replaced by under scores (``_´´) when defining
# portname_OPTS. The format is "OPT1=<on|off> OPT2=<on|off> ... OPTn=<on|off>"
#

PORTSLIST=$(cat <<PORTSLIST_EOF
devel/gmake
devel/libpciaccess
devel/xdg-utils
graphics/drm-kmod
net/bwi-firmware-kmod
net/bwn-firmware-kmod
sysutils/fusefs-jmtpfs
sysutils/rtsx-kmod
x11-drivers/xf86-video-amdgpu
PORTSLIST_EOF
)

# Options to build Openbox from ports.
openbox_OPTS="IMLIB=on SVG=on NOTIFY=on PATCHES=on"

# Options for building the NVIDIA drivers
NVIDIA_BUILD_OPTS="OPTIONS_UNSET=\"LINUX DOCS\""

# List of NVIDIA drivers to build
NVIDIA_DRIVERS="340 390 470 latest"

# Path to the local ports tree. It will be mounted to ${SYSDIR}/usr/ports.
PORTSTREE=/usr/ports

# List of packages to ignore when building a i386 image
PKG_EXCLUDE_i386() {
cat << PKG_EXCLUDE_I386_END
graphics/xsane
print/gimp-gutenprint
emulators/virtualbox-ose-additions
PKG_EXCLUDE_I386_END
}

# Software packages which install from git repos.
GIT_SITE="https://github.com/mrclksr"
GIT_REPOS=$(cat <<GIT_REPOS_EOF
${GIT_SITE}/DSBDriverd.git
${GIT_SITE}/DSBMC.git
${GIT_SITE}/DSBMC-Cli.git
${GIT_SITE}/DSBMD.git
${GIT_SITE}/dsbcfg.git
${GIT_SITE}/libdsbmc.git
${GIT_SITE}/DSBMixer.git
${GIT_SITE}/DSBSu.git
${GIT_SITE}/DSBExec.git
https://github.com/bsdlme/ipfwGUI.git
GIT_REPOS_EOF
)

# Define build commands for each git repo.
DSB_QT_TOOLS_BUILD_CMD="qmake-qt5 && make clean && make && make install"

DSBDriverd_BUILD_CMD="make clean install"
DSBMC_BUILD_CMD="cmake -DUSE_QT6=ON -S . -B build; cmake --build build; cmake --build build -t install"
DSBMC_Cli_BUILD_CMD="make clean install"
DSBMD_BUILD_CMD="make clean install"
DSBMixer_BUILD_CMD="cmake -DUSE_QT6=ON -S . -B build; cmake --build build; cmake --build build -t install"
DSBSu_BUILD_CMD="cmake -S . -B build; cmake --build build; cmake --build build -t install"

DSBExec_BUILD_CMD="cmake -S . -B build; cmake --build build; cmake --build build -t install"
ipfwGUI_BUILD_CMD="make install"

